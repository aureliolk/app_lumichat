generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String?         @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  availabilityStatus String          @default("ONLINE")
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  accounts           Account[]
  conversations      Conversation[]  @relation("AssignedConversations")
  messages           Message[]
  sessions           Session[]
  workspaces         WorkspaceUser[]
}

model Workspace {
  id               String            @id @default(cuid())
  name             String
  domain           String?           @unique
  logo             String?
  featureFlags     Json              @default("{}")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  contacts         Contact[]
  conversations    Conversation[]
  facebookChannels FacebookChannel[]
  inboxes          Inbox[]
  users            WorkspaceUser[]
}

model WorkspaceUser {
  id          String    @id @default(cuid())
  userId      String
  workspaceId String
  role        String    @default("AGENT")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
}

model Contact {
  id             String         @id @default(cuid())
  workspaceId    String
  name           String?
  email          String?
  phone          String?
  avatarUrl      String?
  identifier     String?
  additionalInfo Json?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  workspace      Workspace      @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  conversations  Conversation[]

  @@unique([workspaceId, identifier])
  @@index([email, phone])
}

model Inbox {
  id              String           @id @default(cuid())
  name            String
  description     String?
  workspaceId     String
  channelType     String
  channelId       String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  conversations   Conversation[]
  facebookChannel FacebookChannel?
  workspace       Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model FacebookChannel {
  id              String    @id @default(cuid())
  pageId          String    @unique
  pageAccessToken String
  userAccessToken String
  workspaceId     String
  inboxId         String    @unique
  instagramId     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  inbox           Inbox     @relation(fields: [inboxId], references: [id], onDelete: Cascade)
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
}

model Conversation {
  id             String    @id @default(cuid())
  workspaceId    String
  inboxId        String
  contactId      String
  assigneeId     String?
  status         String    @default("OPEN")
  additionalInfo Json?
  lastMessageAt  DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  assignee       User?     @relation("AssignedConversations", fields: [assigneeId], references: [id])
  contact        Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  inbox          Inbox     @relation(fields: [inboxId], references: [id], onDelete: Cascade)
  workspace      Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@index([workspaceId, status])
  @@index([inboxId, status])
  @@index([contactId])
  @@index([lastMessageAt])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  content        String
  contentType    String       @default("TEXT")
  attachments    Json?
  senderId       String?
  senderType     String       @default("USER")
  sourceId       String?
  private        Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User?        @relation(fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([createdAt])
}
